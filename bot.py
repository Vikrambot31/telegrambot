from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters
)
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging
import os
from dotenv import load_dotenv

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# ‚úÖ ID —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_IDS = [446393818]
BLACKLIST = set()

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='bot.log', level=logging.INFO)

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
def is_suspicious(text: str) -> bool:
    return any(word in text.lower() for word in ["http://", "https://", "vpn", "bot", "admin", "SpeeeedVPNbot"])

# üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
async def clear_chat_history(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in ALLOWED_IDS:
        try:
            await context.bot.send_message(chat_id, "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")
        except Exception as e:
            logging.warning(f"[–û–ß–ò–°–¢–ö–ê] –û—à–∏–±–∫–∞: {e}")

# ‚ñ∂ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    logging.info(f"User {user.id} –≤—ã–∑–≤–∞–ª /start")

    reply_keyboard = [
        ["üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
        ["üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 17$"],
        ["üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$"],
        ["üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"]
    ]
    await context.bot.send_message(
        chat_id=user.id,
        text="üëá –ù–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    if text.startswith("/"):
        return

    if is_suspicious(text):
        await context.bot.send_message(chat_id=user.id, text="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
        BLACKLIST.add(user.id)
        logging.warning(f"User {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ BLACKLIST: {text}")
        return

    if text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä":
        await context.bot.send_message(
            chat_id=user.id,
            text="–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", url="https://freehumandesignchart.com/")]
            ])
        )

    elif text == "üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 17$":
        await context.bot.send_message(
            chat_id=user.id,
            text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url="https://t.me/Vikram_2027")]
            ])
        )

    elif text == "üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$":
        await context.bot.send_message(
            chat_id=user.id,
            text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å VIP:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url="https://t.me/Vikram_2027")]
            ])
        )

    elif text == "üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã":
        await context.bot.send_message(
            chat_id=user.id,
            text="–û—Ç–∑—ã–≤—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url="https://t.me/Vikram_2027")]
            ])
        )

    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É":
        await start(update, context)

    else:
        await context.bot.send_message(chat_id=user.id, text="‚úÖ –Ø –≤–∞—Å –ø–æ–Ω—è–ª.")

# üß† post_init ‚Äî JobQueue
async def setup_jobs(app):
    app.job_queue.run_repeating(clear_chat_history, interval=900, first=15)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).post_init(setup_jobs).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == '__main__':
    main()
