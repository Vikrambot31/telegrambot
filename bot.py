import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ContextTypes
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = 446393818  # –¢–æ–ª—å–∫–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç—É–ø
blacklist = set()  # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä", callback_data="free_analysis")],
        [InlineKeyboardButton("üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$", callback_data="paid_analysis")],
        [InlineKeyboardButton("üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$", callback_data="vip_package")],
        [InlineKeyboardButton("üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã", callback_data="about_me")]
    ])

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def refresh_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh_page")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in blacklist:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await context.bot.send_sticker(chat_id=update.effective_chat.id, sticker=open("s1.webp", "rb"))
    await asyncio.sleep(1)
    await context.bot.send_audio(chat_id=update.effective_chat.id, audio=open("intro-0.ogg", "rb"))
    await asyncio.sleep(1)
    await update.message.reply_text("üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id in blacklist:
        await query.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if query.data == "free_analysis":
        await query.message.reply_audio(audio=open("primer_razbora.ogg", "rb"))
        await asyncio.sleep(1)
        await query.message.reply_text(
            "üìù –ñ–ú–ò –°–Æ–î–ê ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –§–û–†–ú–£",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="manual_decode")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh_page")]
            ])
        )

    elif query.data == "paid_analysis":
        await query.message.reply_text("üí∞ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$", reply_markup=refresh_button())

    elif query.data == "vip_package":
        await query.message.reply_text("üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$", reply_markup=refresh_button())

    elif query.data == "about_me":
        await query.message.reply_audio(audio=open("about.ogg", "rb"))
        await asyncio.sleep(1)
        await context.bot.send_document(chat_id=query.message.chat.id, document=open("primer_prognoz2.pdf", "rb"))
        await query.message.reply_text("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–±–æ—Ä–æ–≤", reply_markup=refresh_button())

    elif query.data == "manual_decode":
        await query.message.reply_text("‚è≥ –ü–æ–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=refresh_button())

    elif query.data == "refresh_page":
        await query.message.delete()
        await start(update, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
