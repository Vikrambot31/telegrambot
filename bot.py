import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_ID = 446393818  # –¢–æ–ª—å–∫–æ –≤–∞—à Telegram ID

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä", callback_data="free")],
        [InlineKeyboardButton("üêù –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$", callback_data="paid")],
        [InlineKeyboardButton("üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$", callback_data="vip")],
        [InlineKeyboardButton("üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã", callback_data="about")]
    ])

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def get_refresh_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh")]
    ])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ID
def is_authorized(user_id: int) -> bool:
    return user_id == ALLOWED_USER_ID

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await update.message.reply_audio(audio=InputFile("intro-0.ogg"), caption="üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if not is_authorized(user_id):
        await query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    except Exception:
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥—ã
    if query.data == "free":
        await context.bot.send_photo(chat_id=user_id, photo=InputFile("pic1.png"))
        await context.bot.send_message(chat_id=user_id, text="üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É", reply_markup=get_refresh_keyboard())

    elif query.data == "paid":
        await context.bot.send_photo(chat_id=user_id, photo=InputFile("pic2.png"))
        await context.bot.send_message(chat_id=user_id, text="–ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$", reply_markup=get_refresh_keyboard())

    elif query.data == "vip":
        await context.bot.send_photo(chat_id=user_id, photo=InputFile("pic3.png"))
        await context.bot.send_message(chat_id=user_id, text="–ü–∞–∫–µ—Ç VIP –æ—Ç 60$", reply_markup=get_refresh_keyboard())

    elif query.data == "about":
        await context.bot.send_photo(chat_id=user_id, photo=InputFile("pic4.png"))
        await context.bot.send_message(chat_id=user_id, text="–û—Ç–∑—ã–≤—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=get_refresh_keyboard())

    elif query.data == "refresh":
        await context.bot.send_message(chat_id=user_id, text="üîÑ –û–±–Ω–æ–≤–ª—è–µ–º...", reply_markup=None)
        await start(update, context)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
