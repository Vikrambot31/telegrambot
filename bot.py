from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters
)
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
import os
import logging
from dotenv import load_dotenv

# –°–æ—Ö—Ä–∞–Ω–∏ —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á (–û–°–¢–û–†–û–ñ–ù–û, –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π –ø—É–±–ª–∏—á–Ω–æ!)
secret_key = "tKSi68...VIVkE="  # <- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ .env.enc
if os.path.exists(".env.enc"):
    fernet = Fernet(secret_key)
    with open(".env.enc", "rb") as enc_file:
        decrypted_data = fernet.decrypt(enc_file.read())
    with open(".env", "wb") as dec_file:
        dec_file.write(decrypted_data)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

ALLOWED_IDS = [446393818]  # —Ç–≤–æ–π ID
BLACKLIST = set()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='bot.log', level=logging.INFO)

# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
def is_suspicious(text: str) -> bool:
    return any(word in text.lower() for word in ["http://", "https://", "SpeeeedVPNbot"])

# üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
async def clear_chat_history(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in ALLOWED_IDS:
        try:
            await context.bot.send_message(chat_id, "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")
        except Exception as e:
            logging.warning(f"[–û–ß–ò–°–¢–ö–ê] –û—à–∏–±–∫–∞: {e}")

# üîò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    logging.info(f"User {user.id} –≤—ã–∑–≤–∞–ª /start")

    keyboard = [
        [InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä", callback_data="free")],
        [InlineKeyboardButton("üêù –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 17$", callback_data="paid")],
        [InlineKeyboardButton("üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$", callback_data="vip")],
        [InlineKeyboardButton("üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã", callback_data="about")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if os.path.exists("s1.webp"):
        with open("s1.webp", "rb") as sticker:
            await context.bot.send_sticker(chat_id=user.id, sticker=sticker)

    await context.bot.send_message(chat_id=user.id, text="üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üñ± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    if query.data == "refresh":
        return await start(update, context)

    await context.bot.send_message(chat_id=user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}")

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    if text.startswith("/"):
        return

    if is_suspicious(text):
        await context.bot.send_message(chat_id=user.id, text="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
        BLACKLIST.add(user.id)
        logging.warning(f"User {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ BLACKLIST: {text}")
        return

    await context.bot.send_message(chat_id=user.id, text="–Ø –≤–∞—Å –ø–æ–Ω—è–ª.")

# üîß post_init –¥–ª—è JobQueue
async def setup_jobs(app):
    app.job_queue.run_repeating(clear_chat_history, interval=900, first=10)

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).post_init(setup_jobs).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == '__main__':
    main()
