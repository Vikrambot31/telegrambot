from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import logging
import os
from dotenv import load_dotenv

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ALLOWED_IDS = [446393818]  # –¢–≤–æ–π Telegram ID
BLACKLIST = set()

# üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='bot.log', level=logging.INFO)

# üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
def is_suspicious(text: str) -> bool:
    blacklist_words = ["http://", "https://", "vpn", "bot", "admin", "SpeeeedVPNbot"]
    return any(word in text.lower() for word in blacklist_words)

# ‚ñ∂ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–∑–≤–∞–ª /start")

    keyboard = [
        [KeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä")],
        [KeyboardButton("üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$")],
        [KeyboardButton("üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$")],
        [KeyboardButton("üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await context.bot.send_message(
        chat_id=user.id,
        text="üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    if is_suspicious(text):
        BLACKLIST.add(user.id)
        await context.bot.send_message(
            chat_id=user.id,
            text="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º. –í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
        )
        logging.warning(f"[SPAM] User {user.id}: {text}")
        return

    # –û—Ç–≤–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    if text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.")
    elif text == "üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.")
    elif text == "üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$":
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: VIP –ø–∞–∫–µ—Ç.")
    elif text == "üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã":
        await update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ä–∞–º. –Ø ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ Human Design.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
