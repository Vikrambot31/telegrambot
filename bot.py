import os
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, filters
)
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞—â–∏—Ç–∞ ---
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_IDS = [446393818]
BLACKLIST = set()

logging.basicConfig(filename='bot.log', level=logging.INFO)

def is_suspicious(text: str) -> bool:
    return any(w in text.lower() for w in ["http://", "https://", "vpn", "bot", "admin", "SpeeeedVPNbot"])

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup([
    ["üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
    ["üêù –ë—ã—Å—Ç—Ä—ã–π –†–∞–∑–±–æ—Ä –æ—Ç 17 $"],
    ["üëë –†–∞–∑–±–æ—Ä VIP –æ—Ç 60 $"],
    ["üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã"]
], resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:", reply_markup=main_menu)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if not user or user.id not in ALLOWED_IDS or user.id in BLACKLIST:
        return

    if is_suspicious(text):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        BLACKLIST.add(user.id)
        logging.warning(f"BLACKLIST: {user.id} | {text}")
        return

    if text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä":
        await send_files(update, ["s1.webp", "intro-0.ogg"])
        await update.message.reply_text("üìù –§–æ—Ä–º–∞: https://freehumandesignchart.com/")
        await update.message.reply_text("üì© –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: https://t.me/Vikram_2027")

    elif text == "üêù –ë—ã—Å—Ç—Ä—ã–π –†–∞–∑–±–æ—Ä –æ—Ç 17 $":
        await send_files(update, ["pic4.png", "pic5.png", "x2.ogg"])
        await update.message.reply_text("üì© –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: https://t.me/Vikram_2027")

    elif text == "üëë –†–∞–∑–±–æ—Ä VIP –æ—Ç 60 $":
        await send_files(update, ["pic6.png", "pic5.png", "Voprosi.png", "x3.ogg"])
        await update.message.reply_text("üì© –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: https://t.me/Vikram_2027")

    elif text == "üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã":
        await update.message.reply_text(
            "üìú –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –æ—Ç–∑—ã–≤—ã –∏ —Å–∏—Å—Ç–µ–º—É:\n"
            "Instagram: https://www.instagram.com/vikram_hd_2027\n\n"
            "üìé –ü—Ä–∏–º–µ—Ä—ã:"
        )
        await send_files(update, ["Prognoz_Love_god.pdf", "primer_prognoz2.pdf", "primer_razbora.ogg"])
        await update.message.reply_text("üì© –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: https://t.me/Vikram_2027")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ ---
async def send_files(update, filenames):
    for name in filenames:
        try:
            if name.endswith(".ogg"):
                await update.message.reply_voice(voice=open(name, "rb"))
            elif name.endswith(".webp"):
                await update.message.reply_sticker(sticker=open(name, "rb"))
            elif name.endswith(".png") or name.endswith(".jpg"):
                await update.message.reply_photo(photo=open(name, "rb"))
            elif name.endswith(".pdf"):
                await update.message.reply_document(document=open(name, "rb"))
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {name}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == '__main__':
    main()
