import os
import asyncio
import logging
from dotenv import load_dotenv

from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, JobQueue
)
from gen_keys import get_gate_description

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
logging.basicConfig(filename='bot.log', level=logging.INFO)

ALLOWED_IDS = [446393818]

keyboard = [
    ["üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
    ["üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$"],
    ["üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$"],
    ["üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã"]
]
menu_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_form_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ñ–ú–ò –°–Æ–î–ê ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –§–û–†–ú–£", url="https://freehumandesignchart.com/")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh")]
    ])

def get_contact_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/Vikram_2027")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="refresh")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_user.id not in ALLOWED_IDS:
        return
    logging.info(f"User {chat_id} –≤—ã–∑–≤–∞–ª /start")

    if os.path.exists("s1.webp"):
        with open("s1.webp", "rb") as sticker:
            await context.bot.send_sticker(chat_id, sticker)

    if os.path.exists("intro-0.ogg"):
        with open("intro-0.ogg", "rb") as audio:
            await context.bot.send_audio(chat_id, audio)

    await context.bot.send_message(chat_id, "üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_IDS:
        return
    query = update.callback_query
    await query.answer()

    if query.data == "decode_self":
        await query.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif query.data == "refresh":
        await context.bot.send_message(update.effective_chat.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_user.id not in ALLOWED_IDS:
        return

    text = update.message.text.lower()
    if update.message.text.startswith("/"):
        return

    if "speeeedvpnbot" in text or "http://" in text:
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ó–∞–≤–µ—Ä—à–∞—é.")
        return

    if "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π" in text:
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.")
        for fname in ["pic1.png", "pic2.png", "pic3.png"]:
            if os.path.exists(fname):
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)
        if os.path.exists("x1.ogg"):
            with open("x1.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)

        await update.message.reply_text("üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_form_buttons())

    elif "–ø–ª–∞—Ç–Ω—ã–π" in text:
        await update.message.reply_text("üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∏–∂–µ.")
        for fname in ["pic4.png", "pic4-1.png", "pic5.png"]:
            if os.path.exists(fname):
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)
        if os.path.exists("x2.ogg"):
            with open("x2.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)

        await update.message.reply_text("üëá", reply_markup=get_contact_button())

    elif "vip" in text:
        await update.message.reply_text("üëë –ü–∞–∫–µ—Ç VIP: —Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∏–∂–µ.")
        for fname in ["pic6.png", "pic5.png", "Voprosi.png"]:
            if os.path.exists(fname):
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)
        if os.path.exists("x3.ogg"):
            with open("x3.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)

        await update.message.reply_text("üëá", reply_markup=get_contact_button())

    elif "–æ–±–æ –º–Ω–µ" in text or "–æ—Ç–∑—ã–≤—ã" in text:
        await update.message.reply_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –æ—Ç–∑—ã–≤—ã –∏ —Å–∏—Å—Ç–µ–º—É ‚Äî –º–æ–π Instagram:\nhttps://www.instagram.com/vikram_hd_2027\n–ù–∏–∂–µ ‚Äî –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π:")
        for fname in ["Razbor_na_God.pdf", "primer_prognoz2.pdf"]:
            if os.path.exists(fname):
                with open(fname, "rb") as doc:
                    await context.bot.send_document(chat_id, doc)
        await update.message.reply_text("üëá", reply_markup=get_contact_button())

async def clear_chat_history(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in ALLOWED_IDS:
        try:
            await context.bot.send_message(chat_id, "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main():
    app = Application.builder().token(TOKEN).post_init(lambda app: app.job_queue.run_repeating(clear_chat_history, interval=900, first=10)).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
