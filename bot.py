import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters
from dotenv import load_dotenv
from gen_keys import get_gate_description

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = 446393818  # –¢–æ–ª—å–∫–æ —Ç—ã —É–ø—Ä–∞–≤–ª—è–µ—à—å

used_ids = set()

# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ ---
def media_path(filename):
    return os.path.join(os.getcwd(), filename)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start(update: Update, context: CallbackContext.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in used_ids:
        used_ids.add(user_id)

    keyboard = [['üìã –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä'],
                ['üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$'],
                ['üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$'],
                ['üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# --- –ö–Ω–æ–ø–∫–∞ ¬´–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É¬ª ---
async def refresh(update: Update, context: CallbackContext.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async for msg in context.bot.get_chat_history(chat_id):
        try:
            await context.bot.delete_message(chat_id, msg.message_id)
        except:
            continue
    await start(update, context)

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
async def handle_message(update: Update, context: CallbackContext.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É.")
        return

    text = update.message.text

    if text == 'üìã –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä':
        await context.bot.send_voice(chat_id=update.effective_chat.id, voice=open(media_path("intro-0.ogg"), "rb"))
        await update.message.reply_text("üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É", reply_markup=ReplyKeyboardMarkup(
            [['üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É']], resize_keyboard=True))

    elif text == 'üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$':
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(media_path("pic2.png"), "rb"))
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", reply_markup=ReplyKeyboardMarkup(
            [['üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É']], resize_keyboard=True))

    elif text == 'üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$':
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(media_path("pic3.png"), "rb"))
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", reply_markup=ReplyKeyboardMarkup(
            [['üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É']], resize_keyboard=True))

    elif text == 'üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã':
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(media_path("Voprosi.png"), "rb"))
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", reply_markup=ReplyKeyboardMarkup(
            [['üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É']], resize_keyboard=True))

    elif text == 'üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É':
        await update.message.reply_text("‚úçÔ∏è –ñ–ú–ò –°–Æ–î–ê ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –§–û–†–ú–£")

    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É':
        await refresh(update, context)

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª... –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# --- MAIN ---
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
