from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
from gen_keys import get_gate_description
import asyncio

TOKEN = "7419809164:AAHofDyitmblhjCszawIJpzdHTmwgANIHrw"

used_ids = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = [
    ["üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"],
    ["üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç 15$"],
    ["üëë –ü–∞–∫–µ—Ç VIP –æ—Ç 60$"],
    ["üìú –û–±–æ –º–Ω–µ / –û—Ç–∑—ã–≤—ã"]
]

menu_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_form_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ñ–ú–ò –°–Æ–î–ê ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –§–û–†–ú–£", url="https://freehumandesignchart.com/")],
        [InlineKeyboardButton("üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="decode_self")]
    ])

def get_contact_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/Vikram_2027")]
    ])

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
    try:
        with open("sticker.webp", "rb") as sticker:
            await context.bot.send_sticker(update.effective_chat.id, sticker)
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        with open("p1.ogg", "rb") as audio:
            await context.bot.send_audio(update.effective_chat.id, audio)
    except:
        pass

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=menu_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "decode_self":
        context.user_data["awaiting_gates"] = True
        await query.message.reply_text("(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text.lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ—Ä–æ—Ç
    if context.user_data.get("awaiting_gates"):
        try:
            gates = [int(x.strip()) for x in text.split(",")][:5]
            result = get_gate_description(gates)
            used_ids.add(user_id)
            context.user_data["awaiting_gates"] = False
            await update.message.reply_text(result)
            return
        except:
            context.user_data["awaiting_gates"] = False

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"
    if "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π" in text:
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–∞—É–∑–∞–º–∏
        for fname in ["pic1.png", "pic2.png", "pic3.png"]:
            try:
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            except:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pic7.png
        try:
            with open("pic7.png", "rb") as img:
                await context.bot.send_photo(chat_id, img)
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ pic7.png
        except:
            pass

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞—É–¥–∏–æ
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        try:
            with open("x1.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)
        except:
            pass

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await update.message.reply_text(
            "üëá –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_form_buttons()
        )

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä"
    elif "–ø–ª–∞—Ç–Ω—ã–π" in text:
        await update.message.reply_text("üí∏ –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∏–∂–µ.")
        for fname in ["pic4.png", "pic4-1.png", "pic5.png"]:
            try:
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            except:
                pass
        try:
            with open("x2.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)
        except:
            pass
        await update.message.reply_text("üëá", reply_markup=get_contact_button())

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "VIP"
    elif "vip" in text:
        await update.message.reply_text("üëë –ü–∞–∫–µ—Ç VIP: —Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∏–∂–µ.")
        for fname in ["pic6.png", "pic5.png", "Voprosi.png"]:
            try:
                with open(fname, "rb") as img:
                    await context.bot.send_photo(chat_id, img)
                    await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            except:
                pass
        try:
            with open("x3.ogg", "rb") as audio:
                await context.bot.send_audio(chat_id, audio)
        except:
            pass
        await update.message.reply_text("üëá", reply_markup=get_contact_button())

    # –ï—Å–ª–∏ "–û–±–æ –º–Ω–µ" –∏–ª–∏ "–û—Ç–∑—ã–≤—ã"
    elif "–æ–±–æ –º–Ω–µ" in text or "–æ—Ç–∑—ã–≤—ã" in text:
        await update.message.reply_text(
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –æ—Ç–∑—ã–≤—ã –∏ —Å–∏—Å—Ç–µ–º—É ‚Äî –º–æ–π Instagram:\n"
            "https://www.instagram.com/vikram_hd_2027\n"
            "–ù–∏–∂–µ ‚Äî –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π:"
        )

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ "Razbor_na_God.pdf"
        try:
            with open("Razbor_na_God.pdf", "rb") as pdf:
                await context.bot.send_document(chat_id, pdf)
        except:
            pass

        await update.message.reply_text("üëá", reply_markup=get_contact_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
